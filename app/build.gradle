import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

//    id("org.jlleitschuh.gradle.ktlint") version "12.1.0"

}

android {
    namespace 'org.codebase.ktlinittest'
    compileSdk 34

    defaultConfig {
        applicationId "org.codebase.ktlinittest"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    configurations {
        ktlint
    }

//    ktlint{
//        android = true
//        ignoreFailures = false
//        reporters {
//            reporter "plain"
//            reporter "checkstyle"
//            reporter "sarif"
//        }
//    }

}


dependencies {

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    ktlint("com.pinterest.ktlint:ktlint-cli:1.1.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

tasks.register('installGitHook', Copy) {
    def suffix = "ubuntu"  // Set the suffix for Ubuntu
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        suffix = "windows"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        suffix = "macos"
    }

    // Resolve the absolute paths
    def scriptsDir = new File(rootProject.rootDir, "scripts")
    def prePushScript = new File(scriptsDir, "pre-push-$suffix")
    def gitHooksDir = new File(rootProject.rootDir, '.git/hooks')

    // Copy pre-push script
    from prePushScript
    into gitHooksDir
    rename("pre-push-$suffix", 'pre-push')
    fileMode 0775
}

// Configure the dependency after projects have been evaluated
gradle.projectsEvaluated {
    tasks.getByPath(':app:preBuild').dependsOn installGitHook
}

tasks.register('downloadKtlint', Copy) {
    doLast {
        def ktlintVersion = "1.1.1" // Specify the desired version
        def ktlintUrl = "https://github.com/pinterest/ktlint/releases/download/${ktlintVersion}/ktlint"
        def ktlintDestination = file("$projectDir/ktlint")

        ant.get(src: ktlintUrl, dest: ktlintDestination)
    }
}

preBuild.dependsOn downloadKtlint

//tasks.register("ktlintCheck", JavaExec) {
//    group = "verification"
//    description = "Check Kotlin code style."
//    classpath = configurations.ktlint
//    mainClass = "com.pinterest.ktlint.Main"
//    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
//    args "src/**/*.kt", "**.kts", "!**/build/**"
//}
//
//tasks.named("check") {
//    dependsOn tasks.named("ktlintCheck")
//}
//
//tasks.register("ktlintFormat", JavaExec) {
//    group = "formatting"
//    description = "Fix Kotlin code style deviations."
//    classpath = configurations.ktlint
//    mainClass = "com.pinterest.ktlint.Main"
//    jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
//    // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information
//    args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
//}
